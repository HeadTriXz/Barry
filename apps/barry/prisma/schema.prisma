generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

// Leveling
enum LevelUpNotificationType {
  CurrentChannel @map("CURRENT_CHANNEL")
  CustomChannel  @map("CUSTOM_CHANNEL")
  DirectMessage  @map("DIRECT_MESSAGE")
}

model LevelUpSettings {
  guildID             String                  @id @map("guild_id")
  message             String                  @default("Congratulations {user}! You have reached level {level}.")
  notificationChannel String?                 @map("notification_channel")
  notificationType    LevelUpNotificationType @default(CurrentChannel) @map("notification_type")

  @@map("level_up_settings")
}

model LevelingSettings {
  guildID         String   @id @map("guild_id")
  enabled         Boolean  @default(false)
  ignoredChannels String[] @default([]) @map("ignored_channels")
  ignoredRoles    String[] @default([]) @map("ignored_roles")

  @@map("leveling_settings")
}

model MemberActivity {
  guildID      String @map("guild_id")
  userID       String @map("user_id")
  messageCount Int    @default(0) @map("message_count")
  experience   Int    @default(0)
  level        Int    @default(0)
  reputation   Int    @default(0)
  voiceMinutes Int    @default(0) @map("voice_minutes")

  @@id([guildID, userID])
  @@map("member_activity")
}

// Marketplace
/// Profiles
enum ProfileCreationStatus {
  Profile      @map("PROFILE")
  Availability @map("AVAILABILITY")
  Contact      @map("CONTACT")
  Banner       @map("BANNER")
  Preview      @map("PREVIEW")
}

model Profile {
  userID         String                 @id @map("user_id")
  about          String
  availability   Int?
  bannerURL      String?                @map("banner_url")
  contact        String?
  creationStatus ProfileCreationStatus? @map("creation_status")
  links          String[]               @default([])
  messages       ProfileMessage[]
  location       String?
  pricing        String?
  skills         String[]               @default([])

  @@map("profiles")
}

model ProfileMessage {
  messageID String @id @map("message_id")
  guildID   String @map("guild_id")
  userID    String @map("user_id")

  profile   Profile @relation(references: [userID], fields: [userID])

  @@index([guildID, userID])
  @@map("profile_messages")
}

model ProfilesSettings {
  guildID       String  @id @map("guild_id")
  channelID     String? @map("channel_id")
  enabled       Boolean @default(false)
  lastMessageID String? @map("last_message_id")

  @@map("profiles_settings")
}
