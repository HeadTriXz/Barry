generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model BlacklistedGuild {
  guildID String @id @map("guild_id")

  @@map("blacklisted_guilds")
}

model BlacklistedUser {
  userID String @id @map("user_id")

  @@map("blacklisted_users")
}

// Leveling
enum LevelUpNotificationType {
  CurrentChannel @map("CURRENT_CHANNEL")
  CustomChannel  @map("CUSTOM_CHANNEL")
  DirectMessage  @map("DIRECT_MESSAGE")
}

model LevelUpSettings {
  guildID             String                  @id @map("guild_id")
  message             String                  @default("Congratulations {user}! You have reached level {level}.")
  notificationChannel String?                 @map("notification_channel")
  notificationType    LevelUpNotificationType @default(CurrentChannel) @map("notification_type")

  @@map("level_up_settings")
}

model LevelingSettings {
  guildID         String   @id @map("guild_id")
  enabled         Boolean  @default(false)
  ignoredChannels String[] @default([]) @map("ignored_channels")
  ignoredRoles    String[] @default([]) @map("ignored_roles")

  @@map("leveling_settings")
}

model MemberActivity {
  guildID      String @map("guild_id")
  userID       String @map("user_id")
  messageCount Int    @default(0) @map("message_count")
  experience   Int    @default(0)
  level        Int    @default(0)
  reputation   Int    @default(0)
  voiceMinutes Int    @default(0) @map("voice_minutes")

  @@id([guildID, userID])
  @@map("member_activity")
}

/// Rewards
model Reward {
  id        Int     @id @default(autoincrement())
  guildID   String  @map("guild_id")
  roleID    String  @map("role_id")
  level     Int
  settings  RewardsSettings @relation(references: [guildID], fields: [guildID], onDelete: Cascade)

  @@index([guildID])
  @@map("rewards")
}

model RewardsSettings {
  guildID     String  @id @map("guild_id")
  enabled     Boolean @default(false)
  keepRewards Boolean @default(false) @map("keep_rewards")
  rewards     Reward[]

  @@map("rewards_settings")
}

// Marketplace
/// Profiles
enum ProfileCreationStatus {
  Availability @map("AVAILABILITY")
  Contact      @map("CONTACT")
  Banner       @map("BANNER")
  Preview      @map("PREVIEW")
}

model Profile {
  userID         String                 @id @map("user_id")
  about          String
  availability   Int?
  bannerURL      String?                @map("banner_url")
  contact        String?
  creationStatus ProfileCreationStatus? @map("creation_status")
  links          String[]               @default([])
  messages       ProfileMessage[]
  location       String?
  pricing        String?
  skills         String[]               @default([])

  reports        Report[]

  @@map("profiles")
}

model ProfileMessage {
  messageID String  @id @map("message_id")
  guildID   String  @map("guild_id")
  userID    String  @map("user_id")

  profile   Profile @relation(references: [userID], fields: [userID])

  @@index([guildID, userID])
  @@map("profile_messages")
}

model ProfilesSettings {
  guildID       String  @id @map("guild_id")
  channelID     String? @map("channel_id")
  enabled       Boolean @default(false)
  lastMessageID String? @map("last_message_id")

  @@map("profiles_settings")
}

/// Requests
enum RequestStatus {
  Available        @map("AVAILABLE")
  Taken            @map("TAKEN")
  Finished         @map("FINISHED")

  DraftContact     @map("DRAFT_CONTACT")
  DraftAttachments @map("DRAFT_ATTACHMENTS")
  DraftPreview     @map("DRAFT_PREVIEW")
}

model Request {
  id           Int                 @id @default(autoincrement())
  attachments  RequestAttachment[]
  compensation String
  contact      String?
  deadline     String?
  description  String
  location     String?
  messages     RequestMessage[]
  status       RequestStatus       @default(Available)
  title        String
  userID       String              @map("user_id")
  createdAt    DateTime            @default(now()) @map("created_at")
  updatedAt    DateTime            @updatedAt @map("updated_at")

  reports      Report[]

  @@index([updatedAt, status])
  @@index([userID, status])
  
  @@map("requests")
}

model RequestAttachment {
  id          Int     @id @default(autoincrement())
  contentType String  @map("content_type")
  name        String
  url         String
  requestID   Int     @map("request_id")
  request     Request @relation(references: [id], fields: [requestID], onDelete: Cascade)

  @@index([requestID])
  @@map("request_attachment")
}

model RequestMessage {
  messageID String  @id @map("message_id")
  guildID   String  @map("guild_id")
  requestID Int     @map("request_id")
  request   Request @relation(references: [id], fields: [requestID], onDelete: Cascade)

  @@index([guildID, requestID])
  @@map("request_messages")
}

model RequestsSettings {
  guildID         String  @id @map("guild_id")
  channelID       String? @map("channel_id")
  enabled         Boolean @default(false)
  lastMessageID   String? @map("last_message_id")
  minCompensation Float   @default(50) @map("min_compensation")

  @@map("requests_settings")
}

/// Reports
enum ReportCategory {
  Inappropriate    @map("INAPPROPRIATE")
  ScamsFraud       @map("SCAMS_FRAUD")
  FalseInformation @map("FALSE_INFORMATION")
  Copyright        @map("COPYRIGHT")
  Other            @map("OTHER")
}

enum ReportStatus {
  Open     @map("OPEN")
  Accepted @map("ACCEPTED")
  Ignored  @map("IGNORED")
}

enum ReportType {
  Profile @map("PROFILE")
  Request @map("REQUEST")
}

model Report {
  id        Int            @id @default(autoincrement())
  category  ReportCategory
  creatorID String         @map("creator_id")
  guildID   String         @map("guild_id")
  reason    String
  requestID Int?           @map("request_id")
  type      ReportType
  userID    String         @map("user_id")
  createdAt DateTime       @default(now()) @map("created_at")

  local     LocalReport[]
  profile   Profile?       @relation(references: [userID], fields: [userID])
  request   Request?       @relation(references: [id], fields: [requestID])

  @@map("reports")
}

model LocalReport {
  id        Int
  guildID   String       @map("guild_id")
  reportID  Int          @map("report_id")
  report    Report       @relation(references: [id], fields: [reportID], onDelete: Cascade)
  status    ReportStatus @default(Open)
  threadID  String       @map("thread_id")
  createdAt DateTime     @default(now()) @map("created_at")

  @@id([guildID, id])
  @@map("local_reports")
}

model ReportsSettings {
  guildID              String  @id @map("guild_id")
  channelID            String? @map("channel_id")

  tagOpen              String? @map("tag_open")
  tagAccepted          String? @map("tag_accepted")
  tagIgnored           String? @map("tag_ignored")
  tagInappropriate     String? @map("tag_inappropriate")
  tagScamsFraud        String? @map("tag_scams_fraud")
  tagFalseInformation  String? @map("tag_false_information")
  tagCopyright         String? @map("tag_copyright")
  tagOther             String? @map("tag_other")

  @@map("reports_settings")
}

// Moderation
enum CaseType {
  Note    @map("NOTE")
  Warn    @map("WARN")
  Mute    @map("MUTE")
  Kick    @map("KICK")
  Ban     @map("BAN")
  DWC
  Unmute  @map("UNMUTE")
  Unban   @map("UNBAN")
  UnDWC   @map("UNDWC")
}

model Case {
  id        Int
  guildID   String     @map("guild_id")
  creatorID String     @map("creator_id")
  notes     CaseNote[]
  type      CaseType
  userID    String     @map("user_id")
  createdAt DateTime   @default(now()) @map("created_at")

  @@id([guildID, id])
  @@index([guildID, userID])
  @@index([guildID, creatorID])
  @@index([guildID, type])
  @@map("cases")
}

model CaseNote {
  id        Int
  caseID    Int      @map("case_id")
  guildID   String   @map("guild_id")
  case      Case     @relation(references: [guildID, id], fields: [guildID, caseID], onDelete: Cascade)
  content   String
  creatorID String   @map("creator_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@id([guildID, caseID, id])
  @@map("case_notes")
}

model ModerationSettings {
  guildID   String  @id @map("guild_id")
  channelID String? @map("channel_id")
  dwcDays   Int     @map("dwc_days") @default(7)
  dwcRoleID String? @map("dwc_role_id")
  enabled   Boolean @default(false)

  @@map("moderation_settings")
}

model TempBan {
  guildID   String   @map("guild_id")
  userID    String   @map("user_id")
  expiresAt DateTime @map("expires_at")

  @@id([guildID, userID])
  @@map("temp_bans")
}

model DWCScheduledBan {
  guildID   String   @map("guild_id")
  userID    String   @map("user_id")
  createdAt DateTime @map("created_at") @default(now())

  @@id([guildID, userID])
  @@map("dwc_scheduled_bans")
}

// Starboard
model StarboardSettings {
  guildID           String   @id @map("guild_id")
  channelID         String?  @map("channel_id")
  enabled           Boolean  @default(false)
  allowedChannels   String[] @default([]) @map("allowed_channels")
  allowedRoles      String[] @default([]) @map("allowed_roles")
  autoReactChannels String[] @default([]) @map("auto_react_channels")
  emojiID           String?  @map("emoji_id")
  emojiName         String   @default("\u2B50") @map("emoji_name")
  ignoredChannels   String[] @default([]) @map("ignored_channels")
  ignoredRoles      String[] @default([]) @map("ignored_roles")
  threshold         Int      @default(5)

  @@map("starboard_settings")
}

model StarboardMessage {
  channelID   String              @map("channel_id")
  messageID   String              @map("message_id")
  authorID    String              @map("author_id")
  crosspostID String?             @map("crosspost_id")
  guildID     String              @map("guild_id")

  reactions   StarboardReaction[]

  @@id([channelID, messageID])
  @@map("starboard_messages")
}

model StarboardReaction {
  channelID String           @map("channel_id")
  messageID String           @map("message_id")
  userID    String           @map("user_id")

  message   StarboardMessage @relation(references: [channelID, messageID], fields: [channelID, messageID], onDelete: Cascade)

  @@id([channelID, messageID, userID])
  @@map("starboard_reactions")
}

// Welcomer
model WelcomerSettings {
  guildID          String  @id @map("guild_id")
  channelID        String? @map("channel_id")
  enabled          Boolean @default(false)
  content          String? @default("Welcome {user.mention} to {guild.name}!")
  embedAuthor      String? @map("embed_author")
  embedAuthorIcon  String? @map("embed_author_icon")
  embedColor       Int?    @map("embed_color")
  embedDescription String? @map("embed_description")
  embedImage       String? @map("embed_image")
  embedFooter      String? @map("embed_footer")
  embedFooterIcon  String? @map("embed_footer_icon")
  embedThumbnail   String? @map("embed_thumbnail")
  embedTimestamp   Boolean @default(false) @map("embed_timestamp")
  embedTitle       String? @map("embed_title")
  withImage        Boolean @default(false) @map("with_image")

  @@map("welcomer_settings")
}
