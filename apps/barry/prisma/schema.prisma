generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

// Leveling
enum LevelUpNotificationType {
  CurrentChannel @map("CURRENT_CHANNEL")
  CustomChannel  @map("CUSTOM_CHANNEL")
  DirectMessage  @map("DIRECT_MESSAGE")
}

model LevelUpSettings {
  guildID             String                  @id @map("guild_id")
  message             String                  @default("Congratulations {user}! You have reached level {level}.")
  notificationChannel String?                 @map("notification_channel")
  notificationType    LevelUpNotificationType @default(CurrentChannel) @map("notification_type")

  @@map("level_up_settings")
}

model LevelingSettings {
  guildID         String   @id @map("guild_id")
  enabled         Boolean  @default(false)
  ignoredChannels String[] @default([]) @map("ignored_channels")
  ignoredRoles    String[] @default([]) @map("ignored_roles")

  @@map("leveling_settings")
}

model MemberActivity {
  guildID      String @map("guild_id")
  userID       String @map("user_id")
  messageCount Int    @default(0) @map("message_count")
  experience   Int    @default(0)
  level        Int    @default(0)
  reputation   Int    @default(0)
  voiceMinutes Int    @default(0) @map("voice_minutes")

  @@id([guildID, userID])
  @@map("member_activity")
}

// Marketplace
/// Profiles
enum ProfileCreationStatus {
  Availability @map("AVAILABILITY")
  Contact      @map("CONTACT")
  Banner       @map("BANNER")
  Preview      @map("PREVIEW")
}

model Profile {
  userID         String                 @id @map("user_id")
  about          String
  availability   Int?
  bannerURL      String?                @map("banner_url")
  contact        String?
  creationStatus ProfileCreationStatus? @map("creation_status")
  links          String[]               @default([])
  messages       ProfileMessage[]
  location       String?
  pricing        String?
  skills         String[]               @default([])

  @@map("profiles")
}

model ProfileMessage {
  messageID String  @id @map("message_id")
  guildID   String  @map("guild_id")
  userID    String  @map("user_id")

  profile   Profile @relation(references: [userID], fields: [userID])

  @@index([guildID, userID])
  @@map("profile_messages")
}

model ProfilesSettings {
  guildID       String  @id @map("guild_id")
  channelID     String? @map("channel_id")
  enabled       Boolean @default(false)
  lastMessageID String? @map("last_message_id")

  @@map("profiles_settings")
}

/// Requests
enum RequestStatus {
  Available        @map("AVAILABLE")
  Taken            @map("TAKEN")
  Finished         @map("FINISHED")

  DraftContact     @map("DRAFT_CONTACT")
  DraftAttachments @map("DRAFT_ATTACHMENTS")
  DraftPreview     @map("DRAFT_PREVIEW")
}

model Request {
  id           Int                 @id @default(autoincrement())
  attachments  RequestAttachment[]
  compensation String
  contact      String?
  deadline     String?
  description  String
  location     String?
  messages     RequestMessage[]
  status       RequestStatus       @default(Available)
  title        String
  userID       String              @map("user_id")
  createdAt    DateTime            @default(now()) @map("created_at")
  updatedAt    DateTime            @updatedAt @map("updated_at")

  @@index([updatedAt, status])
  @@index([userID, status])
  
  @@map("requests")
}

model RequestAttachment {
  id          Int     @id @default(autoincrement())
  contentType String  @map("content_type")
  name        String
  url         String
  requestID   Int     @map("request_id")
  request     Request @relation(references: [id], fields: [requestID], onDelete: Cascade)

  @@index([requestID])
  @@map("request_attachment")
}

model RequestMessage {
  messageID String  @id @map("message_id")
  guildID   String  @map("guild_id")
  requestID Int     @map("request_id")
  request   Request @relation(references: [id], fields: [requestID], onDelete: Cascade)

  @@index([guildID, requestID])
  @@map("request_messages")
}

model RequestsSettings {
  guildID         String  @id @map("guild_id")
  channelID       String? @map("channel_id")
  enabled         Boolean @default(false)
  lastMessageID   String? @map("last_message_id")
  minCompensation Float   @default(50) @map("min_compensation")

  @@map("requests_settings")
}

// Moderation
enum CaseType {
  Note    @map("NOTE")
  Warn    @map("WARN")
  Mute    @map("MUTE")
  Kick    @map("KICK")
  Ban     @map("BAN")
  Unmute  @map("UNMUTE")
  Unban   @map("UNBAN")
}

model Case {
  id        Int
  guildID   String     @map("guild_id")
  creatorID String     @map("creator_id")
  notes     CaseNote[]
  type      CaseType
  userID    String     @map("user_id")
  createdAt DateTime   @default(now()) @map("created_at")

  @@id([guildID, id])
  @@index([guildID, userID])
  @@index([guildID, creatorID])
  @@index([guildID, type])
  @@map("cases")
}

model CaseNote {
  id        Int
  caseID    Int      @map("case_id")
  guildID   String   @map("guild_id")
  case      Case     @relation(references: [guildID, id], fields: [guildID, caseID], onDelete: Cascade)
  content   String
  creatorID String   @map("creator_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@id([guildID, caseID, id])
  @@map("case_notes")
}

model ModerationSettings {
  guildID   String  @id @map("guild_id")
  channelID String? @map("channel_id")
  dwcDays   Int     @map("dwc_days") @default(7)
  dwcRoleID String? @map("dwc_role_id")
  enabled   Boolean @default(false)

  @@map("moderation_settings")
}

model TempBan {
  guildID   String   @map("guild_id")
  userID    String   @map("user_id")
  expiresAt DateTime @map("expires_at")

  @@id([guildID, userID])
  @@map("temp_bans")
}
